'use client';

import { useState } from 'react';
import { useSignatureStore } from '@/store/signatureStore';
import { SignatureTemplate, signatureTemplates, templateCategories, getTemplatesByCategory } from '@/utils/signatureTemplates';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { 
  Calendar, 
  MapPin, 
  Phone, 
  Globe, 
  Mail,
  CheckCircle,
  Sparkles
} from 'lucide-react';

interface TemplateGalleryProps {
  onClose: () => void;
}

export function TemplateGallery({ onClose }: TemplateGalleryProps) {
  const { loadSignature } = useSignatureStore();
  const [selectedCategory, setSelectedCategory] = useState('all');
  const [appliedTemplate, setAppliedTemplate] = useState<string | null>(null);

  const filteredTemplates = getTemplatesByCategory(selectedCategory);

  const handleApplyTemplate = (template: SignatureTemplate) => {
    // Convert template data to saved signature format
    const savedSignature = {
      id: template.id,
      name: template.name,
      data: template.data,
      html: '', // This will be generated by the store
      createdAt: new Date().toISOString()
    };
    
    loadSignature(savedSignature);
    setAppliedTemplate(template.id);
    
    // Close the gallery after a short delay
    setTimeout(() => {
      onClose();
    }, 1000);
  };

  const getCategoryColor = (category: string) => {
    switch (category) {
      case 'professional': return 'bg-blue-100 text-blue-800';
      case 'executive': return 'bg-purple-100 text-purple-800';
      case 'creative': return 'bg-pink-100 text-pink-800';
      case 'minimal': return 'bg-gray-100 text-gray-800';
      default: return 'bg-gray-100 text-gray-800';
    }
  };

  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4">
      <Card className="w-full max-w-6xl max-h-[90vh] overflow-hidden flex flex-col">
        <CardHeader className="border-b">
          <div className="flex justify-between items-center">
            <CardTitle className="flex items-center gap-2 text-2xl">
              <Sparkles className="w-6 h-6 text-blue-500" />
              Signature Templates
            </CardTitle>
            <Button variant="ghost" onClick={onClose}>
              Close
            </Button>
          </div>
          <p className="text-gray-600">
            Choose from our professionally designed templates to get started quickly
          </p>
        </CardHeader>
        
        <CardContent className="flex-1 overflow-hidden flex flex-col">
          {/* Category Filters */}
          <div className="flex flex-wrap gap-2 py-4 border-b">
            {templateCategories.map((category) => (
              <Button
                key={category.id}
                variant={selectedCategory === category.id ? 'default' : 'outline'}
                onClick={() => setSelectedCategory(category.id)}
                className="rounded-full"
              >
                {category.name}
              </Button>
            ))}
          </div>
          
          {/* Templates Grid */}
          <div className="flex-1 overflow-y-auto py-4">
            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
              {filteredTemplates.map((template) => (
                <Card 
                  key={template.id} 
                  className="overflow-hidden hover:shadow-lg transition-shadow"
                >
                  <CardHeader className="pb-2">
                    <div className="flex justify-between items-start">
                      <CardTitle className="text-lg">{template.name}</CardTitle>
                      <div className={`px-2 py-1 rounded-full text-xs font-medium ${getCategoryColor(template.category)}`}>
                        {template.category.charAt(0).toUpperCase() + template.category.slice(1)}
                      </div>
                    </div>
                    <p className="text-sm text-gray-600">{template.description}</p>
                  </CardHeader>
                  
                  <CardContent className="p-0">
                    {/* Template Preview */}
                    <div className="border-t border-b p-4 bg-gray-50">
                      <div className="flex gap-4">
                        <div className="flex-shrink-0">
                          {template.data.logoUrl && template.data.logoUrl !== '[LOGO_URL]' ? (
                            <img 
                              src={template.data.logoUrl} 
                              alt="Company Logo" 
                              width="87" 
                              height="113"
                              className="object-contain"
                            />
                          ) : (
                            <div className="w-[87px] h-[113px] bg-gray-200 border-2 border-dashed border-gray-300 rounded flex items-center justify-center text-gray-500 text-xs">
                              Logo
                            </div>
                          )}
                        </div>
                        
                        <div className="flex-1 min-w-0">
                          <div className="font-bold text-gray-900 truncate">
                            {template.data.fullName !== '[FULL_NAME]' ? template.data.fullName : '[Full Name]'}
                          </div>
                          <div className="text-gray-700 text-sm truncate">
                            {template.data.jobTitle !== '[ROLE]' ? template.data.jobTitle : '[Job Title]'}
                          </div>
                          <div className="text-gray-600 text-sm truncate">
                            {template.data.companyName !== '[COMPANY]' ? template.data.companyName : '[Company Name]'}
                          </div>
                          
                          <div className="mt-2 space-y-1 text-xs text-gray-600">
                            {template.data.email && template.data.email !== '[EMAIL]' && (
                              <div className="flex items-center gap-1 truncate">
                                <Mail className="w-3 h-3 flex-shrink-0" />
                                <span className="truncate">{template.data.email}</span>
                              </div>
                            )}
                            
                            {template.data.phoneNumber && template.data.phoneNumber !== '[PHONE]' && (
                              <div className="flex items-center gap-1 truncate">
                                <Phone className="w-3 h-3 flex-shrink-0" />
                                <span className="truncate">{template.data.phoneNumber}</span>
                              </div>
                            )}
                            
                            {template.data.website && (
                              <div className="flex items-center gap-1 truncate">
                                <Globe className="w-3 h-3 flex-shrink-0" />
                                <span className="truncate">{template.data.website.replace(/^https?:\/\//, '')}</span>
                              </div>
                            )}
                            
                            {template.data.address && (
                              <div className="flex items-start gap-1 truncate">
                                <MapPin className="w-3 h-3 flex-shrink-0 mt-0.5" />
                                <span className="truncate">{template.data.address.split('\n')[0]}</span>
                              </div>
                            )}
                          </div>
                        </div>
                      </div>
                    </div>
                    
                    <div className="p-4">
                      <Button
                        onClick={() => handleApplyTemplate(template)}
                        className="w-full"
                        disabled={appliedTemplate === template.id}
                      >
                        {appliedTemplate === template.id ? (
                          <>
                            <CheckCircle className="w-4 h-4 mr-2" />
                            Applied
                          </>
                        ) : (
                          'Use This Template'
                        )}
                      </Button>
                    </div>
                  </CardContent>
                </Card>
              ))}
            </div>
          </div>
          
          {/* Footer */}
          <div className="border-t pt-4 text-center text-sm text-gray-600">
            <p>
              Don't see what you're looking for? Start with any template and customize it to your needs.
            </p>
          </div>
        </CardContent>
      </Card>
    </div>
  );
}